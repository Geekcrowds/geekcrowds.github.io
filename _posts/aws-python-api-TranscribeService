Install Boto3

pip install boto3
==============================================================================
Set Up AWS Credentials

Method 1: Setting Environment Variables
You can set the AWS credentials as environment variables in your operating system. Hereâ€™s how to do it for different platforms:

On Linux or macOS
Open your terminal and run the following commands, replacing YOUR_ACCESS_KEY_ID and YOUR_SECRET_ACCESS_KEY with your actual AWS credentials:

export AWS_ACCESS_KEY_ID=YOUR_ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY=YOUR_SECRET_ACCESS_KEY
export AWS_DEFAULT_REGION=YOUR_REGION
-------------------------------------------------------------
Method 2: Create a credentials file
Create a file at ~/.aws/credentials (Linux or macOS) or C:\Users\USERNAME\.aws\credentials (Windows) and add your credentials:

[default]
aws_access_key_id = YOUR_ACCESS_KEY_ID
aws_secret_access_key = YOUR_SECRET_ACCESS_KEY

Create a config file
Create a file at ~/.aws/config (Linux or macOS) or C:\Users\USERNAME\.aws\config (Windows) and add your region configuration:

[default]
region = YOUR_REGION
-------------------------------------------------------------
Method 3: Using AWS CLI to Configure Credentials

$ aws configure
AWS Access Key ID [None]: YOUR_ACCESS_KEY_ID
AWS Secret Access Key [None]: YOUR_SECRET_ACCESS_KEY
Default region name [None]: us-west-2
Default output format [None]: json
===================================================
import boto3
import time

def transcribe_audio(file_uri, transcribe_client, job_name):
    response = transcribe_client.start_transcription_job(
        TranscriptionJobName=job_name,
        Media={'MediaFileUri': file_uri},
        MediaFormat='mp3',
        LanguageCode='en-US'
    )
    return response

def get_transcription_result(transcribe_client, job_name):
    while True:
        status = transcribe_client.get_transcription_job(TranscriptionJobName=job_name)
        if status['TranscriptionJob']['TranscriptionJobStatus'] in ['COMPLETED', 'FAILED']:
            return status
        print("Not ready yet...")
        time.sleep(10)

def main():
    # Initialize boto3 client for Transcribe
    transcribe_client = boto3.client('transcribe')

    # S3 URI of the audio file
    s3_uri = 's3://your-bucket-name/path-to-your-file.mp3'

    # Unique job name for the transcription job
    job_name = 'your-transcription-job-name'

    # Start the transcription job
    transcribe_response = transcribe_audio(s3_uri, transcribe_client, job_name)
    print(f"Started transcription job: {transcribe_response}")

    # Wait for the transcription job to complete
    result = get_transcription_result(transcribe_client, job_name)
    print(f"Transcription job completed: {result}")

    # If the job succeeded, print the transcript URL
    if result['TranscriptionJob']['TranscriptionJobStatus'] == 'COMPLETED':
        transcript_uri = result['TranscriptionJob']['Transcript']['TranscriptFileUri']
        print(f"Transcript URL: {transcript_uri}")

if __name__ == "__main__":
    main()
========================================================================
import boto3
import time

def transcribe_audio(file_uri, transcribe_client, job_name):
    response = transcribe_client.start_transcription_job(
        TranscriptionJobName=job_name,
        Media={'MediaFileUri': file_uri},
        MediaFormat='mp3',
        LanguageCode='en-US'
    )
    return response

def get_transcription_result(transcribe_client, job_name):
    while True:
        status = transcribe_client.get_transcription_job(TranscriptionJobName=job_name)
        if status['TranscriptionJob']['TranscriptionJobStatus'] in ['COMPLETED', 'FAILED']:
            return status
        print("Not ready yet...")
        time.sleep(10)

def main():
    # AWS credentials
    ACCESS_KEY = 'your-access-key'
    SECRET_KEY = 'your-secret-key'
    SESSION_TOKEN = 'your-session-token'  # If you have one; otherwise, this can be omitted.

    # Initialize boto3 client for Transcribe
    transcribe_client = boto3.client(
        'transcribe',
        aws_access_key_id=ACCESS_KEY,
        aws_secret_access_key=SECRET_KEY,
        aws_session_token=SESSION_TOKEN  # Optional, include if you have a session token.
    )

    # S3 URI of the audio file
    s3_uri = 's3://your-bucket-name/path-to-your-file.mp3'

    # Unique job name for the transcription job
    job_name = 'your-transcription-job-name'

    # Start the transcription job
    transcribe_response = transcribe_audio(s3_uri, transcribe_client, job_name)
    print(f"Started transcription job: {transcribe_response}")

    # Wait for the transcription job to complete
    result = get_transcription_result(transcribe_client, job_name)
    print(f"Transcription job completed: {result}")

    # If the job succeeded, print the transcript URL
    if result['TranscriptionJob']['TranscriptionJobStatus'] == 'COMPLETED':
        transcript_uri = result['TranscriptionJob']['Transcript']['TranscriptFileUri']
        print(f"Transcript URL: {transcript_uri}")

if __name__ == "__main__":
    main()
====================================================================================================
